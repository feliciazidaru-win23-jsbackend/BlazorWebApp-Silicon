@page "/Account/Manage/ChangePassword"
@layout ManageLayout

@using System.ComponentModel.DataAnnotations
@using BlazorWebApp.Components.Account
@using BlazorWebApp.Components.Account.Pages.Manage
@using BlazorWebApp.Components.Account.Shared
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
<PageTitle>Security</PageTitle>

<h2>Security</h2>
<h5>Password</h5>
<StatusMessage Message="@changePasswordMessage" />
<div class="row">
    <div class="col-md-6">
        <EditForm Model="@ChangePasswordInput" FormName="ChangePasswordInput" OnValidSubmit="OnChangePasswordValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="ChangePasswordInput.OldPassword" class="form-control"  autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                <label for="old-password" class="form-label">Old password</label>
                <ValidationMessage For="() => ChangePasswordInput.OldPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="ChangePasswordInput.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                <label for="new-password" class="form-label">New password</label>
                <ValidationMessage For="() => ChangePasswordInput.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="ChangePasswordInput.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="() => ChangePasswordInput.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="btn-theme">Change password</button>
            <button class ="btn-gray" onclick="Refresh()">Cancel</button>
        </EditForm>
    </div>
</div>

<h5>Delete Account</h5>
<p>When you delete your account, your public profile will be deactivated immediately. If you change your mind before the 14 days are up, sign in with your email and password, and we’ll send you a link to reactivate your account.</p>
<div>
    <EditForm Model="@DeleteAccountInput" FormName="DeleteAccountInput" OnValidSubmit="OnDeleteAccountValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-check">
            <InputCheckbox class="form-check-input" @bind-Value="DeleteAccountInput.ConfirmDelete" />
            <label class="form-check-label" for="confirm-delete">Yes, I want to delete my account.</label>
        </div>
        <button class="w-100 btn btn-lg btn-danger" type="submit">Delete </button>
    </EditForm>

</div>

@code {
    private string? changePasswordMessage;
    private string? deleteAccountMessage;
    private ApplicationUser user = default!;
    private bool requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private ChangePasswordInputModel ChangePasswordInput { get; set; } = new();
    private DeleteAccountInputModel DeleteAccountInput { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
    }

    private async Task OnChangePasswordValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, ChangePasswordInput.OldPassword, ChangePasswordInput.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            changePasswordMessage = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private async Task OnDeleteAccountValidSubmitAsync()
    {
        if (requirePassword && !await UserManager.CheckPasswordAsync(user, DeleteAccountInput.Password))
        {
            deleteAccountMessage = "Error: Incorrect password.";
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);
        RedirectManager.RedirectToCurrentPage();
    }

    private class ChangePasswordInputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

    private class DeleteAccountInputModel
    {
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
        public bool ConfirmDelete { get; set; }
    }
}
