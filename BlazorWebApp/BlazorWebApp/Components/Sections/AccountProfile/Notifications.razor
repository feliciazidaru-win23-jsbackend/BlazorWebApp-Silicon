@page "/Account/Notifications"
@using BlazorWebApp.Components.Account.Shared
@rendermode InteractiveServer
@layout ManageLayout
@attribute [StreamRendering]
<div class="content">
    <div class="password-form">
        <h2 class="title">Notifications</h2>

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="errormessage">
                @statusMessage
            </div>
        }
        <EditForm FormName="subscribe" Model="SubscribeForm" OnValidSubmit="OnSave" method="post" novalidate>
            <div class="options" style="display: none">
                <div class="checkbox-group">
                    <div class="input-group">
                        <InputCheckbox @bind-Value="SubscribeForm.DailyNewsletter" />
                        <label>Daily Newsletter</label>
                    </div>
                </div>
                <div class="checkbox-group">
                    <div class="input-group">
                        <InputCheckbox @bind-Value="SubscribeForm.AdvertisingUpdates" />
                        <label>Advertising Updates</label>
                    </div>
                </div>
                <div class="checkbox-group">
                    <div class="input-group">
                        <InputCheckbox @bind-Value="SubscribeForm.WeekinReview" />
                        <label>Week in Review</label>
                    </div>
                </div>
                <div class="checkbox-group">
                    <div class="input-group">
                        <InputCheckbox @bind-Value="SubscribeForm.EventUpdates" />
                        <label>Event Updates</label>
                    </div>
                </div>
                <div class="checkbox-group">
                    <div class="input-group">
                        <InputCheckbox @bind-Value="SubscribeForm.StartupsWeekly" />
                        <label>Startups Weekly</label>
                    </div>
                </div>
                <div class="checkbox-group">
                    <div class="input-group">
                        <InputCheckbox @bind-Value="SubscribeForm.Podcasts" />
                        <label>Podcasts</label>
                    </div>
                </div>
            </div>

            <div class="email-input">
                <label>Prefered email for notifications</label>
                <InputText @bind-Value="SubscribeForm.Email" />
            </div>
            <div id="newsletter-switch" class="btn-switch" >
                <label class="switch" for="newsletter-switch-mode">
                    <InputCheckbox @bind-Value="isEmailValid" @onclick="OnToggleSubscribe" type="checkbox" id="newsletter-switch-mode" />
                    <span class="slider round"></span>
                </label>
                @if (isEmailValid)
                {
                    <label>Unsubscribe from Newsletter</label>
                }
                else
                {
                    <label>Subscribe to Newsletter</label>
                }
              </div>
            <div class="buttons">
                <button type="reset" class="button btn-gray">Cancel</button>
                <button type="submit" class="button btn-theme">Save Changes</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? statusMessage;
    private bool isEmailValid;

    public SubscribeFormModel SubscribeForm { get; set; } = new SubscribeFormModel();

    public class SubscribeFormModel
    {
        [EmailAddress]
        [Required(ErrorMessage = "You must enter an email address")]
        [Display(Name = "Email address", Prompt = "Your email")]
        public string Email { get; set; } = null!;

        public bool DailyNewsletter { get; set; } = true;
        public bool AdvertisingUpdates { get; set; } = true;
        public bool WeekinReview { get; set; } = true;
        public bool EventUpdates { get; set; } = true;
        public bool StartupsWeekly { get; set; } = true;
        public bool Podcasts { get; set; } = true;
    }


   private async Task OnToggleSubscribe()
    {
        try
        {
            HttpResponseMessage result;

            // Check if email is subscribed
            result = await Http.PostAsJsonAsync("https://newsletter-provider-silicon.azurewebsites.net/api/GetSubscriber?code=gwHAAkFs1djblNFn3oXxxd-XzZVID-wV-jgeUYEFvLLcAzFuzj-Hng%3D%3D", new { SubscribeForm.Email });
            var isSubscribed = result.IsSuccessStatusCode;
             statusMessage = "You are already subscribed!";

            if (isSubscribed)
            {
                result = await Http.PostAsJsonAsync("https://newsletter-provider-silicon.azurewebsites.net/api/Unsubscribe?code=zf5rwvFTS7ewAcRyAPj97-lHdsWacAbiKqeEeD0E2HSiAzFunz_L0w%3D%3D", SubscribeForm);
                statusMessage = "Unsubscribed from newsletter!";
            }
            else
            {
                result = await Http.PostAsJsonAsync("https://newsletter-provider-silicon.azurewebsites.net/api/Subscribe?code=Eg8p8-8RCxObyOKhLh5Ze-fCcajP3OjpeMGCs0mSIy3qAzFupV2WQQ%3D%3D", SubscribeForm);
                statusMessage = "Subscribed to newsletter!";
            }

            if (!result.IsSuccessStatusCode)
            {
                statusMessage = "Unable to update subscription status! Try again!";
            }
        }
        catch
        {
            statusMessage = "Unable to update subscription status! Try again!";
        }
    }

    private async Task OnSave()
    {
        try
        {
            // Perform save logic, e.g., save to the database or update form details
            statusMessage = "Form details saved successfully!";
        }
        catch
        {
            statusMessage = "Unable to save form details! Try again!";
        }
    }

}
 
