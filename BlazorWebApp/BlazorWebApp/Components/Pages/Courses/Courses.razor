@page "/Courses"
@using Microsoft.AspNetCore.Authorization
@using BlazorWebApp.Components.GraphQL

@attribute [StreamRendering]
@attribute [Authorize]
@rendermode InteractiveServer
<section id="courses">
    <div class="container">
        <div class="header">
            <h1>Courses</h1>
            <div class="right-controls">
                <select class="dropdown">
                    <option>All Categories</option>
                </select>
                <div class="input-search-group">
                    <input id="searchQuery" name="searchQuery" placeholder="Search courses" />
                    <i class="fa fa-search search-icon"></i>
                </div>
            </div>
        </div>
        <div class="course-items">
            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="status-message">@statusMessage</div>
            }

            @if (courses != null && courses.Any())
            {
                @foreach (var course in courses)
                {
                    <a href="/courses/details/@course.Id" class="course">
                        @if (course.IsBestseller)
                        {
                            <div class="bestseller"><p>Best Seller</p></div>
                        }
                        <button class="btn-gray btn-circle bookmark"><i class="fa-regular fa-bookmark"></i></button>
                        <img src="@course.ImageUri" alt="@course.Title" />

                        <div class="content">
                            <h5 class="title">@course.Title</h5>
                            <p class="author">By @course.Author</p>
                            <div class="pricing">
                                @if (course.DiscountPrice > 0)
                                {
                                    <div class="discount" style="color:red">
                                        @course.DiscountPrice
                                    </div>
                                }
                                <div class="price @(course.DiscountPrice > 0 ? "discount-enabled" : "")">@course.Price</div>
                            </div>

                            <hr />
                            <div class="footer">
                                <div class="hours">
                                    <i class="fa-regular fa-clock"></i>@course.Hours
                                </div>
                                <div class="likes">
                                    <i class="fa-regular fa-thumbs-up"></i>@course.LikesInPercent (@course.LikesInNumbers)
                                </div>
                            </div>
                        </div>
                    </a>
                }
            }
            else if (courses == null)
            {
                <p>Loading courses...</p>
            }
        </div>

        <div class="get-started">
            <div class="text-box">
                <p>Ready to get started?</p>
                <h2>Take Your <span>Skills</span> to the Next Level</h2>
                <button class="btn-theme" asp-action="" asp-controller="">Work with us</button>
            </div>
            <div class="image-box">
                <img src="https://silicon.blob.core.windows.net/courses/illustration.svg" alt="banner image">
            </div>
        </div>
    </div>
</section>

@code{
    private string? statusMessage;

    private List<CourseCardModel>? courses;

    protected override async Task OnInitializedAsync()
    { try
        {
            var query = new GraphQlQuery
                {
                    Query = "{getCourses {id imageUri  isBestseller likes likesInPercent title authors{name} prices {price discount}}}"
                };

            var response = await Http.PostAsJsonAsync("https://courses-provider.azurewebsites.net/api/graphql?code=G2MRX03uMzcUwrgGtP75jTVAcUQB_UAz4ze_kHy0dn4JAzFu0doYJw%3D%3D", query);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();

                if (result?.Data.TryGetProperty("getCourses", out var coursesElement) == true)
                {
                    courses = coursesElement.EnumerateArray().Select(course =>
                    {
                        var courseModel = new CourseCardModel();

                        if (course.TryGetProperty("id", out var idElement))
                        {
                            courseModel.Id = idElement.GetString();
                        }
                        if (course.TryGetProperty("title", out var titleElement))
                        {
                            courseModel.Title = titleElement.GetString();
                        }
                        if (course.TryGetProperty("isBestseller", out var isBestsellerElement))
                        {
                            courseModel.IsBestseller = isBestsellerElement.GetBoolean();
                        }
                        if (course.TryGetProperty("isDigital", out var isDigitalElement))
                        {
                            courseModel.IsDigital = isDigitalElement.GetBoolean();
                        }
                        if (course.TryGetProperty("likesInPercent", out var likesInPercentElement))
                        {
                            courseModel.LikesInPercent = likesInPercentElement.GetString();
                        }
                        if (course.TryGetProperty("likes", out var likesElement))
                        {
                            courseModel.LikesInNumbers = likesElement.GetString();
                        }
                        if (course.TryGetProperty("hours", out var hoursElement))
                        {
                            courseModel.Hours = hoursElement.GetString();
                        }
                        if (course.TryGetProperty("authors", out var authorsElement) && authorsElement.GetArrayLength() > 0)
                        {
                            courseModel.Author = authorsElement[0].GetProperty("name").GetString();
                        }
                        if (course.TryGetProperty("prices", out var pricesElement))
                        {
                            if (pricesElement.TryGetProperty("price", out var priceElement))
                            {
                                courseModel.Price = priceElement.GetDecimal();
                            }
                            if (pricesElement.TryGetProperty("discount", out var discountElement))
                            {
                                courseModel.DiscountPrice = discountElement.GetDecimal();
                            }
                        }
                        if (course.TryGetProperty("imageUri", out var imageUriElement))
                        {
                            courseModel.ImageUri = imageUriElement.GetString();
                        }

                        return courseModel;
                    }).ToList();
                    statusMessage = "Courses loaded successfully.";
                }
                else
                {

                    statusMessage = "$Unable to retrieve courses! ";
                    Console.WriteLine("getCourses missing");
                }
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                statusMessage = $"HTTP request failed with status code: {response.StatusCode}. Response: {responseContent}";
                Console.WriteLine($"HTTP request failed with status code: {response.StatusCode}. Response: {responseContent}");
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
   }

    public class Course
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Image { get; set; } = null!;
        public string PartitionKey { get; set; } = "course";
        public bool IsBestseller { get; set; }
        public bool IsDigital { get; set; }
        public string[]? Categories { get; set; }
        public string Title { get; set; } = null!;
        public string? Ingress { get; set; }
        public int StarRating { get; set; }
        public string? Reviews { get; set; }
        public string? Likes { get; set; }
        public string? LikesInPercent { get; set; }
        public int Hours { get; set; }
        public Author[] Authors { get; set; } = null!;
        public Prices Prices { get; set; } = null!;
        public Content? Content { get; set; }
    }


    public class Author
    {
        public string? Name { get; set; }
    }
    public class Prices
    {
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
    }

    public class Content
    {
        public string? Description { get; set; }
        public string[]? Includes { get; set; }
        public Programdetail[]? Programdetails { get; set; }
    }

    public class Programdetail
    {
        public int Id { get; set; }
        public string Title { get; set; } = null!;
        public string? Description { get; set; }
    }

    public class CourseCardModel
    {
        public string? Id { get; set; }
        public bool IsBestseller { get; set; }
        public string? ImageUri { get; set; }
        public string? Title { get; set; }
        public string? Author { get; set; }
        public decimal? Price { get; set; }
        public decimal? DiscountPrice { get; set; }
        public bool IsDigital { get; set; }
        public string? Hours { get; set; }
        public string? LikesInPercent { get; set; }
        public string? LikesInNumbers { get; set; }
   
    }
}