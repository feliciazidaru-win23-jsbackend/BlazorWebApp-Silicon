
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data
@using Microsoft.EntityFrameworkCore
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [StreamRendering]

@if (user != null)
{
    <section class="profile-info">
        <div class="image-container">
            <img class="profile-info-img" src="@profileImageUrl" alt="@user.UserProfile?.FirstName @user.UserProfile?.LastName">
            <EditForm enctype="multipart/form-data" method="post" Model="uploadModel" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <InputFile id="fileUploader" OnChange="HandleFileSelected" accept="image/*" />
                <label for="fileUploader" class="btn btn-circle btn-circle-sm">
                    <i class="fa-regular fa-refresh"></i>
                </label>
            </EditForm>
        </div>
        <h5>@user.UserProfile?.FirstName @user.UserProfile?.LastName</h5>
        <p>@user.Email</p>
    </section>
}
else
{
    <p>Loading user profile...</p>
}

@code {
    private ApplicationUser? user;
    private MultipartFormDataContent uploadModel = new MultipartFormDataContent();
    public IBrowserFile? selectedFile;
    private string? profileImageUrl;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task LoadUserDataAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;

        if (userClaims.Identity.IsAuthenticated)
        {
            var userId = UserManager.GetUserId(userClaims);
            user = await UserManager.Users.Include(u => u.UserProfile).FirstOrDefaultAsync(u => u.Id == userId);

            if (user?.UserProfile?.ProfileImageUrl != null)
            {
                profileImageUrl = user.UserProfile.ProfileImageUrl;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDataAsync();
    }

    private async void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var resizedImage = await selectedFile.RequestImageFileAsync(selectedFile.ContentType, 400, 400);

        using var stream = resizedImage.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        var bytes = ms.ToArray();
        profileImageUrl = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(bytes)}";

        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (selectedFile == null || user == null)
        {
            statusMessage = "Please select an image file.";
            return;
        }

        try
        {
            // Prepare image data (optional resizing can be included here)
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15)); // Limit file size to 15MB
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFile.Name);

            // Upload image to external server
            var response = await Http.PostAsync("https://filesprovider.azurewebsites.net/api/Upload?code=Z7ZpHypXSLFd8zG747kMU6_I7s52AcvWOtUSSNLoZJ0MAzFu_1U6Aw%3D%3D&containerName=profileimages", content);

            if (response.IsSuccessStatusCode)
            {
                // Get uploaded image URL
                var imageUrl = await response.Content.ReadAsStringAsync();
                user.UserProfile!.ProfileImageUrl = imageUrl;

                // Update user profile with new image URL
                var result = await UserManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    // Update local state and display success message
                    await LoadUserDataAsync();
                    statusMessage = "Profile picture uploaded successfully!";
                }
                else
                {
                    statusMessage = "Error updating user profile.";
                    // Log update errors for troubleshooting
                    Console.WriteLine($"Error updating user profile: {string.Join(",", result.Errors)}");
                }
            }
            else
            {
                statusMessage = "Failed to upload image. Try again.";
                // Log upload errors for troubleshooting
                Console.WriteLine($"Error uploading image: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            statusMessage = "An unexpected error occurred.";
            // Log unexpected errors for troubleshooting
            Console.WriteLine($"Error during upload: {ex.Message}");
        }
    }
}
}





<ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <NavLink class="menu-link" href="Account/Manage" Match="NavLinkMatch.All"><i class="fa-regular fa-gear"></i>Account Details</NavLink>
    </li>
    <li class="nav-item">
        <NavLink class="menu-link" href="Account/Manage/ChangePassword">Security</NavLink>
    </li>
        <li class="nav-item">
    <NavLink class="menu-link" href="/Account/Notifications"><i class="fa-regular fa-bell"></i> Notifications</NavLink>
    </li>

<li class="nav-item">
        <NavLink class="menu-link" href="/logout"> <i class="fa-solid fa-right-from-bracket"></i>Sign Out</NavLink>
</li>
</ul>





