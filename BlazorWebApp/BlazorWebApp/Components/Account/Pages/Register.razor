@page "/Account/Register"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorWebApp.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorWebApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ServiceBusService ServiceBusService


<PageTitle>Sign Up</PageTitle>
<section id="signup">
    <div class="container">
        <EditForm FormName="signupform" Model="SignUpForm" OnValidSubmit="OnValidSubmit" method="post"  novalidate>
            <DataAnnotationsValidator/>
            @if (!string.IsNullOrEmpty(@StatusMessage))
            {
                <div class="alert">
                    @StatusMessage
                </div>
            }
            <h1>Create Account</h1>
            <p>Alreay have an account?<a href="/account/login">Sign in here</a>.</p>
            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>First name</label>
                    <ValidationMessage For="() => SignUpForm.FirstName"/>
                    <InputText @bind-Value="SignUpForm.FirstName" />
                </div>
                <div id="form-lastname" class="input-group">
                    <label>Last name</label>
                    <ValidationMessage For="() => SignUpForm.LastName" />
                    <InputText @bind-Value="SignUpForm.LastName" />
                </div>
                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <ValidationMessage For="() => SignUpForm.Email"  />
                    <InputText @bind-Value="SignUpForm.Email" type="email" />
                </div>
                <div id="form-password" class="input-group">
                    <label> Password</label>
                    <ValidationMessage For="() => SignUpForm.Password" />
                    <InputText @bind-Value="SignUpForm.Password" type="password" />
                </div>
                <div id="form-confirm" class="input-group">
                    <label>Confirm password</label>
                    <InputText @bind-Value="SignUpForm.ConfirmPassword" type="password"/>
                    <ValidationMessage For="() => SignUpForm.ConfirmPassword"  />
                </div>
                <div id="form-terms" class="checkbox">
                    <div class="check-box-group">
                        <div class="input-group">
                            <InputCheckbox @bind-Value="SignUpForm.TermsAndConditions"/>
                            <label>I agree to the <a asp-controller="About" asp-action="Terms">Terms</a> & <a asp-controller="About" asp-action="Conditions">Conditions</a>.</label>
                        </div>
                        <ValidationMessage For="() => SignUpForm.TermsAndConditions" />
                    </div>
                </div>
            </div>

            <button id="form-submit" class="btn-theme-s" type="submit">Sign Up</button>

        </EditForm>
    </div>
</section>

@code{
    [SupplyParameterFromQuery]
    public string StatusMessage { get; set; } = "";

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public SignUpFormModel SignUpForm { get; set; } = new();

    public async Task OnValidSubmit(EditContext editContext)
    {
        var user = new ApplicationUser
            {
                UserProfile=new UserProfile
                {
                    FirstName = SignUpForm.FirstName,
                    LastName = SignUpForm.LastName
                },
                UserName = SignUpForm.Email,
                Email = SignUpForm.Email
            };


        try
        {
            var alreadyExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
            if (alreadyExists != null)
            {
                StatusMessage = "An account with this email address already exists!";
                return;
            }

            var result = await UserManager.CreateAsync(user, SignUpForm.Password);
            if (!result.Succeeded)
            {
                StatusMessage = "Unable to register account, please try again later.";
                return;
            };

        }
        catch (Exception ex)
        {
            StatusMessage = "An error occured while created the account.Please try again.";
            return;

        }
        var body = new { email = SignUpForm.Email };
        await ServiceBusService.SendServiceBusMessage(body, "Verification", "verification_request");
  
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation",new() { ["email"] = SignUpForm.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    public class SignUpFormModel
    {
   
        [Display(Name = "First Name", Prompt = "Enter your first name")]
        [Required]
        public string FirstName { get; set; } = null!;

       
        [Display(Name = "Last Name", Prompt = "Enter your last name")]
        [Required]
        public string LastName { get; set; } = null!;

        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email address", Prompt = "Enter your email address")]
        [Required]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = null!;

        [Display(Name = "Password", Prompt = "Enter your password")]
        [Required]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "Enter a valid password")]
        public string Password { get; set; } = null!;


        [DataType(DataType.Password)]
        [Display(Name = "Confirm password", Prompt = "Confirm your password")]
        [Required]
        [Compare(nameof(Password), ErrorMessage = "Fields don't match")]
        public string ConfirmPassword { get; set; } = null!;


        [Display(Name = "I agree to the Terms & Conditions.")]    
        public bool TermsAndConditions { get; set; } = false;

    }
}













