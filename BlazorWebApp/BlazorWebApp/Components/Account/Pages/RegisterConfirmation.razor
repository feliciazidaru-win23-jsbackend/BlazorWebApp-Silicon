@page "/Account/RegisterConfirmation"
@rendermode InteractiveServer

@using System.Text
@using BlazorWebApp.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorWebApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ServiceBusService ServiceBusService

<PageTitle>Register confirmation</PageTitle>

<section id="signup">
    <div class="container">
      
        <EditForm FormName="verifycode" Model="VerifyCodeForm" OnValidSubmit="OnValidSubmit" method="post" novalidate>
            <DataAnnotationsValidator />  
            <h1>Verify Your Account</h1>
            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>Verification Code</label>
                    <ValidationMessage For="() => VerifyCodeForm.Code" />
                    <InputText @bind-Value="VerifyCodeForm.Code" />
                    <p>@statusMessage</p>
                </div>
                <button id="form-submit" class="btn-theme-s" type="submit">Verify Code</button>
            </div>
        </EditForm>
        <div class="">
            <p>Didn't receive an email?</p>
            <button class="btn-theme" @onclick="ResendCode">Resend the verification code</button>.
        </div>
    </div>
</section>


@code {

    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private VerifyCodeModel VerifyCodeForm { get; set; } = new VerifyCodeModel();

    private async Task OnValidSubmit()
    {
        var result = await Http.PostAsJsonAsync("https://verification-provider-silicon-project.azurewebsites.net/api/verify?code=WL8BVIyCA3w5GJHswlrQqDObLI-9Su-nygz-88FPJ9brAzFueHe5oA%3D%3D", new { Email = Email, Code = VerifyCodeForm.Code });
        if (result.IsSuccessStatusCode)
        {
            var user = await UserManager.FindByEmailAsync(Email!);
            user!.EmailConfirmed = true;
            await UserManager.UpdateAsync(user);
            statusMessage = "Code verified!";
            RedirectManager.RedirectTo("account/login");
        }
        else
        {
            statusMessage = "Invalid code";
        }
    }
    private async Task ResendCode()
    {
        var messageBody = new { Email = Email! };
        try{
            await ServiceBusService.SendServiceBusMessage(messageBody,"Verification","verification_request");
            statusMessage = "Code sent!";
        }
        catch(Exception Ex)
        {
            statusMessage = $"Unable to resend code: {Ex.Message}";
        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }

    }

    public class VerifyCodeModel
    {
        [Required]
        public string Code { get; set; } = null!;
    }
}
