@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<section id="signin">
    <div class="container">

        <EditForm method="post" FormName="signinform" Model="SignInForm" OnValidSubmit="OnValidSubmit" novalidate>
            <DataAnnotationsValidator />
            @if (!string.IsNullOrEmpty(@StatusMessage))
            {
                <div class="alert">
                    @StatusMessage
                </div>
            }
            <h1>Welcome Back</h1>
            <p>Don't have an account yet?<a href="/account/register"> Sign up here</a>.</p>
            <div class="content">
                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <ValidationMessage For="() => SignInForm.Email" />
                    <InputText @bind-Value="SignInForm.Email" type="email" />
                </div>
                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <ValidationMessage For="() => SignInForm.Password" />
                    <InputText @bind-Value="SignInForm.Password" type="password" />
                </div>
                <div id="form-remember" class="checkbox">
                    <div class="check-box-group">
                        <label asp-for="SignInForm.RememberMe">Remember me</label>
                        <InputCheckbox @bind-Value="SignInForm.RememberMe" type="checkbox" />
                    </div>
                </div>
                <button id="form-button" class="btn-theme-s" type="submit">Sign in</button>
                <NavLink id="form-forgot-password">Forgot your password?</NavLink>
            </div>

        </EditForm>
    </div>
</section>
@code {
   
    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }

    [SupplyParameterFromForm]
    private SignInModel SignInForm { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
     
    }

    public async Task OnValidSubmit()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(SignInForm.Email, SignInForm.Password, SignInForm.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/");
        }
        else
        {
           StatusMessage = "Error: Invalid login attempt.";
        }
    }


    public class SignInModel
    {
        [Display(Name = "Email address", Prompt = "Enter your email address")]
        [DataType(DataType.EmailAddress)]
        [Required]

        public string Email { get; set; } = null!;

        [Display(Name = "Password", Prompt = "Enter your password")]
        [DataType(DataType.Password)]
        [Required]
        public string Password { get; set; } = null!;


        [Display(Name = "Remember me")]
        public bool RememberMe { get; set; }
      
    }
}






























































